{"title":"Front-End Internship Training","githubRepo":"jonmak08/front-end-internship-training","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"Front-end internship training documents that will help and guide you to become familiar with all of Liferay's front-end.","content":" Copyright © 2017 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"guide":{"title":"Guides","description":"Learn how to use the various tools and code that is used on Liferay's front-end.","weight":1,"content":" Guides Start learning the basics of front-end technology and begin developing! Choose a Guide Each one provides the base knowledge to begin using Liferay's front-end code and tooling. ","srcFilePath":"src/pages/guide/index.soy","id":"guide","location":"/guide/","url":"/guide/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Search Search results for Guides. ","srcFilePath":"src/pages/guide/search.soy","id":"search","location":"/guide/search.html","url":"/guide/search.html"},"command-line":{"title":"Command Line","description":"Learn about the command line.","layout":"guide","icon":"command-line","weight":5,"content":" {$page.description} What is the command line? A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface, and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Codecademy's Learn the Command Line Ryans Tutorials Linux Tutorial Udacity's Linux Command Line Basics ","srcFilePath":"src/pages/guide/command-line/index.md","id":"command-line","location":"/guide/command-line/","url":"/guide/command-line/"},"developer-tools":{"title":"Developer Tools","description":"Learn about browser developer tools.","layout":"guide","icon":"gear","weight":6,"content":" {$page.description} What are the browser developer tools? Developer tools are a powerful suite of tools that range from inspecting currently-loaded HTML, CSS and JavaScript to showing which assets the page has requested and how long they took to load, that are included in every modern browser. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Code School's Discover DevTools MDN's What are browser developer tools? ","srcFilePath":"src/pages/guide/developer-tools/index.md","id":"developer-tools","location":"/guide/developer-tools/","url":"/guide/developer-tools/"},"css":{"title":"CSS","description":"Learn about CSS.","layout":"guide","icon":"pen","weight":3,"content":" {$page.description} What is CSS? CSS stands for Cascading Style Sheet. CSS defines the look and feel of HTML elements on a web page. CSS is a language of style rules that we use to apply styling to our HTML content, for example setting background colors and fonts, and laying out our content in multiple columns. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Codecademy's HTML & CSS Code School's Adventures in Web Animations Code School's Blasting Off with Bootstrap Code School's CSS Cross-Country MDN's Learn to style HTML using CSS w3school's CSS Tutorial Other resources Codecademy's CSS glossary MDN's CSS reference w3school's CSS reference CSS Quiz After you have finished the tutorials, please take the HTML Quiz. Advanced Tutorials Once you have a good understanding of CSS, please review these advanced tutorials below. Code School's Assembling Sass Sass Basics ","srcFilePath":"src/pages/guide/css/index.md","id":"css","location":"/guide/css/","url":"/guide/css/"},"html":{"title":"HTML","description":"Learn about HTML.","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} What is HTML? HTML stands for H**yper **Text M**arkup **Language. HTML is not a programming language, it is a markup language. A markup language is a set of markup tags and the purpose of the tags are to describe page content. HTML is the markup language that we use to structure and give meaning to our web content, for example defining paragraphs, headings, and data tables, or embedding images and videos in the page. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Codecademy's HTML & CSS Codecademy's Learn HTML Code Schools' Front-end Foundations Code Schools' Front-end Formations Udacity's HTML and CSS Syntax w3school's HTML5 Tutorial Other resources Codecademy's HTML glossary MDN's HTML reference w3school's HTML reference HTML Quiz After you have finished the tutorials, please take the HTML Quiz. ","srcFilePath":"src/pages/guide/html/index.md","id":"html","location":"/guide/html/","url":"/guide/html/"},"git":{"children":{"commands":{"title":"Commands","description":"Frequently used commands in Git.","layout":"guide","weight":2,"content":" {$page.description} Stage changes Usage git add Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history. Manage branches Usage git branch This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository. Checkout changes Usage git checkout In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it’s a way to work on a particular line of development. Remove untracked changes Usage git clean Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files. Copy repository Usage git clone Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository. Commit changes Usage git commit Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users. Update message Usage git commit --amend Passing the --amend flag to git commit lets you amend the most recent commit. This is very useful when you forget to stage a file or omit important information from the commit message. Manage configuration Usage git config A convenient way to set configuration options for your Git installation. You’ll typically only need to use this immediately after installing Git on a new development machine. Download changes Usage git fetch Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project. Initialize a repository Usage git init Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn. View changes Usage git log Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots. Integrate changes Usage git merge A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again. Download and integrate changes Usage git pull Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update. Send changes Usage git push Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions. This is like svn commit, but it sends a series of commits instead of a single changeset. Move changes around Usage git rebase Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore. Move changes around advanced Usage git rebase -i The -i flag is used to begin an interactive rebasing session. This provides all the benefits of a normal rebase, but gives you the opportunity to add, edit, or delete commits along the way. View Git history Usage git reflog Git keeps track of updates to the tip of branches using a mechanism called reflog. This allows you to go back to changesets even though they are not referenced by any branch or tag. Manage remote connections Usage git remote A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut. Undo changes Usage git reset Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository. Undo commit Usage git revert Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base. View current state Usage git status Displays the state of the working directory and the staged snapshot. You’ll want to run this in conjunction with git add and git commit to see exactly what’s being included in the next snapshot. ","srcFilePath":"src/pages/guide/git/commands.md","id":"commands","location":"/guide/git/commands.html","url":"/guide/git/commands.html"},"glossary":{"title":"Glossary","description":"Define the terminology used in Git.","layout":"guide","weight":1,"content":" {$page.description} Branch A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process discussed in Git Basics, the first module of this series. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in a fork in the history of the project. Centralized Workflow If your developers are already comfortable with Subversion, the Centralized Workflow lets you experience the benefits of Git without having to adapt to an entirely new process. It also serves as a friendly transition into more Git-oriented workflows. Feature Branch Workflow The Feature Branch Workflow builds on the Centralized Workflow by encapsulating new features into dedicated branches. This enables the use of pull requests as a means to discuss changes before they’re integrated into the official project. Forking Instead of using a single server-side repository to act as the “central” codebase, forking gives every developer a server-side repository. This means that each contributor has not one, but two Git repositories: a private local one and a public server-side one. HEAD Git’s way of referring to the current snapshot. Internally, the git checkout command simply updates the HEAD to point to either the specified branch or commit. When it points to a branch, Git doesn't complain, but when you check out a commit, it switches into a “detached HEAD” state. Hook A script that runs automatically every time a particular event occurs in a Git repository. Hooks let you customize Git’s internal behavior and trigger customizable actions at key points in the development life cycle. Master The default development branch. Whenever you create a git repository, a branch named \"master\" is created, and becomes the active branch. Pull Request Pull requests are a feature that makes it easier for developers to collaborate using Bitbucket. They provide a user-friendly web interface for discussing proposed changes before integrating them into the official project. Repository A collection of commits, and branches and tags to identify commits. Tag A reference typically used to mark a particular point in the commit chain. In contrast to a head, a tag is not updated by the commit command. Version Control A system that records changes to a file or set of files over time so that you can recall specific versions later. Working Tree The tree of actual checked out files, normally containing the contents of the HEAD commit's tree and any local changes you've made but haven't yet committed. ","srcFilePath":"src/pages/guide/git/glossary.md","id":"glossary","location":"/guide/git/glossary.html","url":"/guide/git/glossary.html"}},"title":"Git","description":"Learn about Git.","layout":"guide","icon":"fork","weight":1,"content":" {$page.description} What is Git? Git is a distributed version control system. It allows groups of people to work on the same documents at the same time, and without interfering with someone else. Every Git working directory is a full-fledged repository with complete history and full revision tracking capabilities, not dependent on network access or a central server like once-popular version control system, CVS of SVN. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Code School's Git Codecademy's Learn Git Github.com's Try Git Learn Git Branching Visualizing Git Concepts with D3 Udacity's How to Use Git and GitHub Other resources Atlassian's Git Cheat Sheet Git's documentation Git's user manual GitHub.com ","srcFilePath":"src/pages/guide/git/index.md","id":"git","location":"/guide/git/","url":"/guide/git/","childIds":["glossary","commands"]},"javascript":{"title":"JavaScript","description":"Learn about JavaScript.","layout":"guide","icon":"balloon-topic","weight":4,"content":" {$page.description} What is JavaScript? JavaScript (JS) is the most popular scripting language in the world. It is the standard language used in web pages, but it is also widely used by desktop apps, mobile phone apps, and internet servers. JavaScript is a scripting language that enables you to create dynamically updating content, control multimedia, animate images, and much more. Every time a web page does more than just sit there and display static information for you to look at JavaScript is probably involved. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. w3school's JavaScript Tutorial Codecademy's JavaScript Codecademy's Learn JavaScript Code School's JavaSCript Road Trip Part 1 Code School's JavaScript Road Trip Part 2 Code School's JavaScript Road Trip Part 3 Code School's JavaScript Best Practices MDN's JavaScript Tutorial Udacity's Intro to JavaScript Other resources Codecademy's JavaScript glossary w3school's JavaScript and HTML DOM reference MDN's JavaScript reference JavaScript Quiz After you have finished the tutorials, please take the JavaScript Quiz. Advanced Tutorials Once you have a good understanding of JavaScript, please review these advanced tutorials below. Code School's ES2015: The Shape of JavaScript to Come ECMASCript 6 Tutorial Metal.js Tutorials Tutorial: Intro to React Redux Tutorial ","srcFilePath":"src/pages/guide/javascript/index.md","id":"javascript","location":"/guide/javascript/","url":"/guide/javascript/"},"web-design":{"title":"Web Design and Development","description":"Learn about web design and development.","layout":"guide","icon":"cloud","weight":7,"content":" {$page.description} What is web design? Web design is a process of conceptualizing, planning, and building a collection of electronic files that determine the layout, colors, text styles, structure, graphics, images, and use of interactive features that deliver pages to your site visitors. What is a website? A website is a collection of related web pages, including multimedia content, typically identified with a common domain name, and published on a web server. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Code School's Fundamentals of Design Code School's The Elements of Web Design Code School's Journey Into Mobile Advanced Tutorials Once you have a good understanding of everything (HTML, CSS, JavaScript, etc), put it all together using these advanced tutorials below. Codecademy's Make an Interactive Website w3school's How To - Build a Web Site ","srcFilePath":"src/pages/guide/web-design/index.md","id":"web-design","location":"/guide/web-design/","url":"/guide/web-design/"}},"childIds":["git","html","css","javascript","command-line","developer-tools","web-design","search"]},"tutorials":{"title":"Tutorials","description":"Tutorials about setting up and using Liferay.","url":"/tutorials/machine/step-one.html/","weight":2,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"machine":{"title":"Setting up your Liferay on your machine","description":"Tutorial for setting up your machine to run Liferay.","tutorialTitle":"Getting started with with Liferay.","url":"/tutorials/tutorial/step-one.html/","content":" ","srcFilePath":"src/pages/tutorials/machine/index.soy","id":"machine","location":"/tutorials/machine/","customURL":true,"children":{"step-eight":{"title":"Step 8: Configuring Liferay's properties and settings","description":"Configuring Liferay's properties and settings.","buttonTitle":"Step 8 Complete","parentId":"machine","layout":"tutorial","weight":8,"content":" {$page.title} We need to configure settings in Liferay to get it to build and run from the source code. What is a \\*.properties file? The \\*.properties files are used to define paths for compiling and running Liferay; paths such as the location of the bundle, what application server to use, the version of the application server that will be used, etc are all customizable from within a custom \\*.properties file. Because we are going to be overriding default properties, the easiest way to accomplish this is through a \\*.USER_NAME.properties. (e.g. app.server.brianchan.properties or build.brianchan.properties). Liferay reads the \\*.properties files in this order of precedence. *.USER_NAME.properties *.ENV_COMPUTERNAME.properties *.ENV_HOST.properties *.ENV_HOSTNAME.properties *.properties Therefore, whatever custom \\*.properties file you set will supersede what is defined in the default file. To find out what the default property values are and what you can override, open the default.properties file (e.g. app.server.properties or build.properties) and search for the line(s) that set the property you want to override. Then, define the property you want to override in your \\*.USER_NAME.properties file, changing its value. Creating a custom build.\\.properties and app.server.\\.properties files Create a file called build._USER\\_NAME_.properties and app.server._USER\\_NAME_.properties inside the folder you cloned your Liferay source code. The USER_NAME is the user you login with, not your machine name. On Windows machines the default is, liferay. Edit your build._USER\\_NAME_.properties file with the following lines in a text editor: javac.memoryMaximumSize=1024m Edit your app.server._USER\\_NAME_.properties file with the path to your desired location of where you want your bundle, where your application server is located, and what type of application server you are using. The path of your bundle should be outside of your cloned Liferay source code folder. Your app.server._USER\\_NAME_.properties file might look something like below when it is complete, if we are using apache tomcat as our application server. app.server.type=tomcat app.server.parent.dir=${project.dir}/../my-custom-folder/bundles app.server.tomcat.dir=${app.server.parent.dir}/tomcat-8.0.32 Creating a portal-ext.properties file Values defined in the portal.properties file are configurations used within Liferay. To override these settings, you will need to create a portal-ext.properties file. You will make changes within this file quite often to customize your Liferay instance. Duplicate the portal-developer.properties file, found within your cloned Liferay source code. (e.g. PATH/liferay-portal/portal-impl/src). Rename this copied file to portal-ext.properties. Open the portal-ext.properties file in a text editor. It should look something like the code below. theme.css.fast.load=false theme.css.fast.load.check.request.parameter=true theme.images.fast.load=false theme.images.fast.load.check.request.parameter=true javascript.fast.load=true javascript.log.enabled=false layout.template.cache.enabled=false combo.check.timestamp=true minifier.enabled=false openoffice.cache.enabled=false velocity.engine.resource.modification.check.interval=0 Set the javascript.fast.load property to false. Set this value to *true**, if we are trying to replicate a production environment with minified JavaScript files. When all custom configurations are complete, move the portal-ext.properties file to one folder level above the application server directory defined in the app.server._USER\\_NAME_.properties file. (i.e. PATH/bundles).","srcFilePath":"src/pages/tutorials/machine/step-eight.md","id":"step-eight","location":"/tutorials/machine/step-eight.html","url":"/tutorials/machine/step-eight.html"},"step-eleven":{"title":"Step 11: Reviewing things you should know","description":"Take a quiz about things you should know about Liferay.","parentId":"machine","layout":"tutorial","weight":11,"content":" {$page.title} Congratulations! You have successfully setup Liferay on your machine and are able to start using it. Take the quiz Be sure you are able to answer the following questions about Liferay successfully before proceeding. What is the Command Line/Terminal? What is the difference between source code and compiled code? What is the difference between trunk and the branches in Git? Where do I find Liferay's source code? How do I update Liferay's source code? Where is my local repository? Where is my remote origin repository? Where is my remote upstream repository? What are git remotes? How do I update my git remote URLs? 10. Where can I find my .gitconfig file? 11. How do I update my .gitconfig file? 12. What do I need to run Liferay? 13. What is an application server? 14. What is a database? 15. What is my current instance of Liferay using for it's application server? 16. Where is my application server located? 17. What is my current instance of Liferay using for it's database? 18. What does the portal-ext.properties file do? 19. What customizations do I currently have applied to my current Liferay instance? 20. Where do you run the command ant all? 21. How do you start my Apache Tomcat? 22. How can you tell if your Liferay is running succesfully? 23. Where do you see if there are errors being thrown by Liferay? 24. How do I shut down my current instance of Liferay? 25. Can I setup Liferay succesfully again? 26. What is the normal Git workflow I should use when submitting changes? You are now ready to start developing on Liferay!","srcFilePath":"src/pages/tutorials/machine/step-eleven.md","id":"step-eleven","location":"/tutorials/machine/step-eleven.html","url":"/tutorials/machine/step-eleven.html"},"step-five":{"title":"Step 5: Understanding Git","description":"Understanding how Liferay and Git work together.","buttonTitle":"Step 5 Complete","parentId":"machine","layout":"tutorial","weight":5,"content":" {$page.title} We are going to learn how Liferay uses Git for it's source code. Since we already know how to use Git, we will focus on its usage within Liferay. Branches vs Trunk Trunk is the latest source code that is currently available. There are many branches of Liferay, so when you start working, you need to be aware of which branch you are working on and what branch you fix should be put in (6.1.x, 6.2.x, 7.0.x, master, etc). Branches are like the limbs of trunk – each branch includes some improvement over the previous branch(es), but once branched, there will not be any new improvements or functionality added. (New changes would remain in trunk until the next branch spawns). When a new branch is created, it will be similar to code in trunk, until trunk has new improvements and updates added to it. Git's repositories With Git, you have to understand three repositories: local repository The local repository is the source code that is stored on your computer. This is where you will be making all your commits to the source code before sending them to others to review. When you have made a commit that you want to submit for review, you will push it from your local repository to your remote origin repository. Make sure to keep your local repository up to date with the remote upstream repository before making any changes. remote origin repository The remote origin repository is the copy of the source code stored in your personal GitHub account. This repository should be identical to your local repository when you are sending code for review. Any code you submit for review will be sent from your local repository into your remote origin repository. remote upstream repository The remote upstream repository is the copy of the source code where all final changes and updates are stored. This is typically in Liferay's GitHub account/cloud. This only contains source code that has been reviewed, approved, and tested for everyone to begin using. Only certain people with approved access are allowed to push files into the remote upstream repository. Even though you will be working with source code, you will never actually be pushing directly to this repository; your code will go through rigorous code reviews before finally making it here. Git's workflow When working with Git, it is important to use best practices to avoid merge conflicts and rebase issues in your pull requests and code causing them to be rejected and uncommitted. Keeping master in sync Brian Chan and/or other approved committers push reviewed, tested, and approved content to the remote upstream repository. The branch most commonly used to push to is the master branch. Fetch changes from the remote upstream/master branch into your local/master branch to make sure everything is up to date with the latest changes. Run the following command to complete this action. Fetch from upstream remote git fetch upstream Merge the changes from the remote upstream/master branch into your local/master branch to make sure both branches are in sync with one another. Run the following commands to complete this action. # Checkout your master branch git checkout master # Merge changes from upstream into your local master branch git merge upstream/master We then push your local/master branch to our remote origin/master branch to make sure everything is now identical. If you notice, your local/master branch, remote origin/master branch, and remote upstream/master branch are all identical. You should never make changes to the master branch. Submitting a pull request for review To make changes and submit code for review, you should always make sure everything is in sync first. Fetch changes from the remote upstream/master branch into your local/master branch to make sure everything is up to date with the latest changes. Merge the changes from the remote upstream/master branch into your local/master branch to make sure both branches are in sync with one another. Create a new development branch based off of the local/master branch. Run the following commands to complete this action. Checkout the local master branch - you want your new branch to come from master git checkout master # Create a new branch named newfeature (give your branch its own simple informative name) git branch newfeature Checkout this new development branch as you will begin making your changes on this branch. Run the following command to complete this action. # Switch to your new branch git checkout newfeature Make your changes and commit them to this development branch. When you are ready to have your code reviewed, make sure to rebase your development branch on top of the remote upstream/master branch so merging will be simple and not have any conflicts. Run the following commands to complete this action. # Fetch upstream master and merge with your repo's master branch git fetch upstream git checkout master git merge upstream/master # If there were any new commits, rebase your development branch git checkout newfeature git rebase master Push your development branch to your remote origin repository. This will allow others to view your branch on your personal GitHub.com fork. Send a pull request to your reviewer using the GitHub.com GUI. Go to your fork on GitHub.com, select your development branch and click the pull request button. For more information about pull requests, please read About pull requests and Creating a pull request. An interactive guide about Git's workflow, can be found at https://guides.github.com/introduction/flow/. ","srcFilePath":"src/pages/tutorials/machine/step-five.md","id":"step-five","location":"/tutorials/machine/step-five.html","url":"/tutorials/machine/step-five.html"},"step-four":{"title":"Step 4: Understanding Liferay's code","description":"Making sense of Liferay's code.","buttonTitle":"Step 4 Complete","parentId":"machine","layout":"tutorial","weight":4,"content":" {$page.title} We are going to define what the difference is between all the versions of Liferay's code. Source code Source code refers to the uncompiled code – if you want to use it, you have to use commands to compile it. This version of the code is constantly being updated. This is the code that anyone could download and modify. The source branches/versions are named like: 6.0.x, 6.1.x, 6.2.x, 7.0x, etc. See Liferay's source code. Compiled code Compiled code is derived from the source code. Basically, someone had to take the source code and compile it for people to use. This code cannot be modified directly, you would need to modify the source which would have to be recompiled for use. This is the code that is delivered to users in our downloadable bundles. Liferay Bundle A Liferay bundle contains the compiled code and an application server. The bundle is what customers download and use in production environments. The bundles are named after their source versions, like: 6.0.6, 6.0.12, 6.1.0, 6.1.10, 7.0.1, etc. See Liferay's bundles. An example of all of this is like baking a cake. The source code would be the recipe for the cake. Modifying any source code would be like modifying the cake ingredients. The compiled code is the mixed, unbaked, cake batter. The bundle is the finished cake, ready to be eaten. How do you get source code? Since Liferay is an open source software, all source code is available on GitHub for download and use. For every CE version, including master, which contains the latest features, the source code is available for anyone to check out. However, for every DE version, source code is only available to Liferay's developers. Why do I need the source code? If you find a bug in Liferay, it is good practice to find out if it is also in the latest bundle version. If it exists in the latest version of that bundle version, a fix should be applied to all versions of that bundle. In order to submit any fix, you would need to get the latest source code for your respective branch and submit a fix in the source code. Once your fix gets merged into its respective branch, QA will build a bundle and test your fix. Ex. If you found a bug in 7.0.1 GA2, you should check to see if the same bug exists in 7.0.x. If it does, then you should submit your fix against 7.0.x. Once it is committed and tested by QA, it will be backported to all the older versions of 7.0.x.","srcFilePath":"src/pages/tutorials/machine/step-four.md","id":"step-four","location":"/tutorials/machine/step-four.html","url":"/tutorials/machine/step-four.html"},"step-nine":{"title":"Step 9: Compiling Liferay's source code","description":"Learn how to compile Liferay's source code.","buttonTitle":"Step 9 Complete","parentId":"machine","layout":"tutorial","weight":9,"content":" {$page.title} Now that we have Liferay setup and configured, we can start compiling the source code to get Liferay running. Getting an application server If we want to use Liferay's default setup, we need to get Apache Tomcat on our machine. Open a Terminal/Git Bash window. Navigate to the cloned Liferay source code folder. Run the command below to download Apache Tomcat. ant -f build-dist.xml unzip-tomcat This command tells ant to look in the build-dist.xml file and execute the unzip-tomcat command. Ant will delete preexisting folder names matching the application server directory defined in the app.server._USER\\_NAME_.properties file. Ant will download the version of Apache Tomcat defined in the app.server._USER\\_NAME_.properties file. Ant will install Apache Tomcat to the folder specified in the app.server._USER\\_NAME_.properties file If this Ant task is successful, you will see a similar output as below. Buildfile: PATH/liferay-portal/build-dist.xml ... BUILD SUCCESSFUL Total time: NNN seconds Compiling the source code Now that everything is setup, we can compile Liferay's source code. Open a Terminal/Git Bash window. Navigate to the cloned Liferay' source code folder. Run the following command to setup Liferay. ant setup-sdk If this Ant task is successful, you will see a similar output as below. Buildfile: PATH/liferay-portal/build.xml ... BUILD SUCCESSFUL Total time: NNN minutes NNN seconds Compile Liferay's source code by running the following command. ant all If this Ant task is successful, you will see a similar output as below. Buildfile: PATH/liferay-portal/build.xml ... BUILD SUCCESSFUL Total time: NNN minutes NNN seconds Navigate to the bin folder in the Apache Tomcat application server folder. (e.g. liferay-portal/tomcat-8.0.32/bin). Start Apache Tomcat by running the following command. Mac/Linux ./catalina.sh run Windows catalina.bat run We use catalina instead of the startup executables so that we can conveniently see the console and any errors that it may throw. Open a web browser and go to http://localhost:8080. 10. Login to Liferay using the following credentials. Username test@liferay.com Password test 11. To stop the server, go to the Terminal/Git Bash window and hit CTRL + c.","srcFilePath":"src/pages/tutorials/machine/step-nine.md","id":"step-nine","location":"/tutorials/machine/step-nine.html","url":"/tutorials/machine/step-nine.html"},"step-one":{"title":"Step 1: Installing Software","description":"Download and install software that will be used throughout the internship.","buttonTitle":"Step 1 Complete","parentId":"machine","layout":"tutorial","weight":1,"content":" {$page.title} Download and install the following software. There are options listed for each category, so feel free to pick whichever you prefer. 7zip 7zip Apache Ant Apache Ant Chat/IM Client Google Hangouts Skype Slack Java JDK Java JDK 8 Git Git Text Editor Atom Brackets Notepad++ Sublime Text Vim Visual Studio Code Version Control GUI GitHub Desktop GitEye Gitg SmartGit SourceTree TortoiseGit ungit And many more... Web Browsers Chrome Firefox Internet Explorer","srcFilePath":"src/pages/tutorials/machine/step-one.md","id":"step-one","location":"/tutorials/machine/step-one.html","url":"/tutorials/machine/step-one.html"},"step-seven":{"title":"Step 7: Getting Liferay's source code","description":"Learn how to get Liferay's source code.","buttonTitle":"Step 7 Complete","parentId":"machine","layout":"tutorial","weight":7,"content":" {$page.title} We are going to get Liferay's source code from GitHub.com on to your machine. Forking a repository In order to begin making changes to source code and have it reviewed, tested, and approved, you will need to make a copy of this code locally. A fork is copying a repository on GitHub.com from it's original owner to your personal GitHub.com account. Forking a repository allows you to freely experiment with changes without affecting the original project. Most commonly, forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own ideas. Forking Liferay Portal Forking a repository is a simple two-step process. On GitHub.com, navigate to the liferay/liferay-portal repository. In the top-right corner of the page, click Fork. Congratulations! You have now have a fork of the original liferay/liferay-portal repository in your GitHub.com account. Cloning Liferay Portal Because forking the repository only makes a copy of the code in GitHub.com, we now need to get this code locally to begin. Setup Git if you have not done so already in the previous steps. Go to your fork of the liferay-portal repository on GitHub.com. Click the Clone or download button. When connecting to a GitHub.com repository from Git, you will need to authenticate using either HTTPS (recommended) or SSH. If you clone with HTTPS, please review the following instructions. If you clone with SSH, please review the following instructions. In the dialog that appears after clicking the Clone or download button, copy the URL that you want to use for your repository. Open a Terminal/Git Bash window. Browse to the location where you would like to download this repository. We will download the repository from GitHub.com to our local machine by cloning it. Run the following command to complete this action. # Pasted URL should look something like: # SSH URL: git@github.com:brianchandotcom/liferay-portal.git # HTTPS: https://github.com/brianchandotcom/liferay-portal.git git clone PASTE URL HERE Upon completion, you should see something like the output below. Cloning into liferay-portal...remote: Counting objects: 10, done. ... remote: Compressing objects: 100% (8/8), done. remove: Total 10 (delta 1), reused 10 (delta 1) Unpacking objects: 100% (10/10), done. Congratulations! You now have a local copy of your fork of the liferay-portal repository! Configuring your remote repository URLs Now that we have have everything locally, we need to add a remote url. A remote URL is Git's fancy way of saying \"the place where your code is stored.\" That URL could be your repository on GitHub.com, or another user's fork, or even on a completely different server. Go to your newly cloned repository in Terminal/Git Bash. Check what your currently remote repositories are by running the following command below. git remote -v The output should be something similar to below if your cloned your repository. origin https://github.com/brianchandotcom/liferay-portal.git (fetch) origin https://github.com/brianchandotcom/liferay-portal.git (push) If you do not have any remote URL's listed, you will have to add a remote URL for the upstream and origin repositories. Add the upstream remote, if it is not already added, to point to the upstream repository URL. Run the following command to complete this action. Copy the upstream repository URL git remote add upstream https://github.com/liferay/liferay-portal.git If you need to add the origin remote, follow the same steps but use the origin repository URL instead of the upstream repository URL. Verify that your remote URL's are correctly pointing to the desired locations by running the following command below. git remote -v The output should be something similar to below if your cloned your repository. origin https://github.com/brianchandotcom/liferay-portal.git (fetch) origin https://github.com/brianchandotcom/liferay-portal.git (push) upstream https://github.com/liferay/liferay-portal.git (fetch) upstream https://github.com/liferay/liferay-portal.git (push) You can add as many remote URL's as you would like. Just make sure to have each one named uniquely. For more information about remotes, please read About remote repositories.","srcFilePath":"src/pages/tutorials/machine/step-seven.md","id":"step-seven","location":"/tutorials/machine/step-seven.html","url":"/tutorials/machine/step-seven.html"},"step-six":{"title":"Step 6: Setting up Git","description":"Learn how to set up Git.","buttonTitle":"Step 6 Complete","parentId":"machine","layout":"tutorial","weight":6,"content":" {$page.title} We are going to setup our Git account so we can begin development. Create an account on GitHub.com Please replace the place holders tokens in the following tutorials with the correct values (ie. FIRSTNAME, LASTNAME, etc). Create an account on Github.com using your Liferay email address (FIRSTNAME.LASTNAME@liferay.com) as your email address. Do not use the word liferay in your username. Add your Full Name to your GitHub.com public profile. Add a picture using gravatar. Be sure to use your FIRSTNAME.LASTNAME@liferay.com email address when registering with gravatar. Follow Brian Chan on GitHub.com. Optional: If you need access to any private Liferay repositories, email it-support@liferay.com with your GitHub.com username, while CC-ing your manager. Configuring .gitconfig You should have already installed Git from step 1. If you do not already have Git installed, please install it now. Add your user name to your global .gitconfig. Run the following command to complete this action. git config --global user.name \"FIRSTNAME LASTNAME\" Example git config --global user.name \"Brian Chan\" Add your Liferay email address (FIRSTNAME.LASTNAME@liferay.com) to your .gitconfig. Run the following command to complete this action. git config --global user.email \"FIRSTNAME.LASTNAME@liferay.com\" Example git config --global user.name \"brian.chan@liferay.com\" On a windows machine, you might run into an error because Git has a limit of 4096 characters for a file name; windows has a limit of 260 characters. You will need to set longpaths to true only on a windows machine. Run the following command to complete this action. git config --global core.longpaths true `","srcFilePath":"src/pages/tutorials/machine/step-six.md","id":"step-six","location":"/tutorials/machine/step-six.html","url":"/tutorials/machine/step-six.html"},"step-ten":{"title":"Step 10: Reading the console","description":"Learn how to read and understand the console output.","buttonTitle":"Step 10 Complete","parentId":"machine","layout":"tutorial","weight":10,"content":" {$page.title} Now that we have Liferay running, we have to understand how to read the messages output by the console. Make sure Liferay is loading your portal-ext.properties file correctly by looking for a line in your console similar to the output below. Loading file:/liferay-portal/portal-ext.properties Make sure Liferay is loading the correct database as defined in your portal-ext.properties file by looking for a line in your console similar to the output below. INFO localhost-startStop-1 Determine dialect for HSQL Database Engine 2.3 localhost-startStop-1 Liferay is configured to use Hypersonic as its database. Do NOT use Hypersonic in production. Hypersonic is an embedded database useful for development and demonstration purposes. The database settings can be changed in portal-ext.properties. Make sure the version of Liferay that you are using is correct by looking for a line in your console similar to the output below. Starting Liferay Community Edition Portal 7.0.4 GA5 (Wilberforce / Build 7004 / October 23, 2017) Upon startup, Liferay will automatically create a deploy folder in your bundle. When there are files placed in this folder, Liferay will automatically scan and consume any deployable packages. The location of this folder can be found by looking for a line in your console similar to the output below. localhost-startStop-1 Auto deploy scanner started for /liferay-portal/deploy Make sure Liferay has finished loading and is ready for use by looking for a line in your console similar to the output below. INFO [main] org.apache.catalina.startup.Catalina.start Server startup in NNN ms Errors in Liferay are usually prefixed with an ERROR warning message. They can be found by looking for a line in your console similar to the output below. ERROR Framework Event Dispatcher: Equinox Container: a029ce5e-e1fc-0017-1e71-df5549d2deba FrameworkEvent ERROR org.osgi.framework.BundleException: Could not resolve module: com.liferay.util.taglib [9]_ Unresolved requirement: Import-Package: javax.el_ [Sanitized] at org.eclipse.osgi.container.Module.start(Module.java:429) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1582) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1562) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1533) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1476) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1) at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230) at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:340) `","srcFilePath":"src/pages/tutorials/machine/step-ten.md","id":"step-ten","location":"/tutorials/machine/step-ten.html","url":"/tutorials/machine/step-ten.html"},"step-three":{"title":"Step 3: What is Liferay?","description":"Explaining what Liferay is.","buttonTitle":"Step 3 Complete","parentId":"machine","layout":"tutorial","weight":3,"content":" {$page.title} It is hard to describe, because it does so much, but what we say is that it is a totally awesome content and document managing, user collaborating, socially enabling, application developing, corporate integrating, completely customizable platform for building the Internet. You are probably doubting us right now, but hopefully once you start using it, you see that it is true. Liferay provides a robust platform to build your site quickly and serve it to all clients, be they desktop, mobile, or anything in between; it provides all the standard applications you need to run on your site; and it provides an easy to use development framework for new applications or customization. In addition to this, Liferay Portal is developed using an open source methodology, by people from around the world. The code base is solid and has been proved to be reliable and stable in mission critical deployments in diverse industries. Read more about what Liferay is.. Liferay versions There are two versions of Liferay - The Community Edition (CE) and Digital Experience Platform (DXP). Liferay Digital Experience Platform, DXP, is our enterprise product and requires a subscription. It is a suite of products that work together to allow companies to digitize business operations, deliver connect customer experiences, and gather actionable customer insight. The suite includes such products as Liferay Digital Enterprise, Mobile Experience, Liferay Connected Services, Developer Tools, Liferay Sync and much more. Liferay Digital Enterprise, DE is the primary component of Liferay DXP and the enterprise equivalent of Liferay Portal CE. Enterprise subscribers are often large enterprise companies who are looking for the stability, reliability, security, and performance. Purchasing a subscription gives customers access to enterprise features/products, as well as our Subscription Services team, which provides full support, regular fixpacks/updates, emergency fixes, and security alerts/patches. Liferay Portal Community Edition, CE, is the free, open source version that is free to anyone to download and use. Updates to CE are released approximately every quarter and include fixes that had already been released to our enterprise subscribers. CE users also have access to the community versions of many of our other products, but do not have access to the subscription services. Forums and JIRA tickets are the primary ways that the community escalates and discusses issues. Read more about Liferay's DXP platform.. What is needed for Liferay? Liferay needs Java, an application server, and a database to run. Our baseline setup is to use Apache Tomcat as the application server and HSQLDB in a non-production environment, and MySQL in a production environment for the database. What is an application server? An application server is a component-based software framework that resides in the middle-tier of a server centric architecture and provides the business logic for an application program. At the core, an application server handles communications to the database on one hand and connections to the web application (Liferay) on the other. Liferay supports many of today's most popular application servers. Even better, there are already prepared and pre-configured distribution packages bundled with an application server. Application servers supported by Liferay: Apache Geronimo Apache Tomcat Caucho Resin Eclipse Jetty IBM Websphere JOnAS Oracle Glassfish Oracle Weblogic Red Hat JBoss What is a database? A database is a collection of information that is organized so that it can be easily accessed, managed and updated. Data is organized into rows, columns and tables, and it is indexed to make it easier to find relevant information. Data gets updated, expanded and deleted as new information is added. Databases process workloads to create and update themselves, querying the data they contain and running applications against it. Databases supported by Liferay: HSQLDB IBM Db2 Microsoft SQL Server MySQL Oracle Database PostgreSQL SAP Sybase Liferay's quick start guide If you wanted to get Liferay up and running quickly, you can follow the following steps. This is not necessary for the tutorial, but in case you wanted to see Liferay up and running quickly, you can use the bundle to get started. This does not use Liferay's source code. Install Java. We should have completed this step previous. Download a Liferay Portal CE bundle at https://www.liferay.com/downloads. Select Bundled with Tomcat and click the Download button. Extract the downloaded bundle into a folder. (e.g. liferay-portal). Open a Terminal/Git Bash window. Navigate to the bin folder within the location of the extracted bundle. cd /liferay-portal/liferay-ce-portal-7.0-ga1/tomcat-8.0.32/bin Start tomcat. On windows run the command below. startup.bat On Linux/Mac, run the command below. ./startup.sh On windows, the server console window will open. On Linux/Mac systems, there is no output in the console window since all logs are stored in tomcat--8.0.32/logs/catalina.out file. Keep watching the console until you see the following. INFO [main] org.apache.catalina.startup.Catalina.start Server startup in NNN ms Liferay Portal is now running and ready to be used. Upon startup, Liferay will automatically open your default browser to http://localhost:8080. You can sign in using username: test@liferay.com and password: test. ","srcFilePath":"src/pages/tutorials/machine/step-three.md","id":"step-three","location":"/tutorials/machine/step-three.html","url":"/tutorials/machine/step-three.html"},"step-two":{"title":"Step 2: Setting up your environment","description":"Learn how to setup your computer's environment correctly.","buttonTitle":"Step 2 Complete","parentId":"machine","layout":"tutorial","weight":2,"content":" {$page.title} Change your computer name Change your computer name to something more user friendly because we will be using this later on when configuring Liferay. Mac Launch System Preferences. Click on Sharing. In the Computer Name: field, enter what you want your computer name to be. Windows Right click on My Computer and choose Properties. On the Computer Name, domain, and workgroup settings section, click the Change Settings... link. Click the Change... button under the Computer Name tab. In the Computer Name: field, enter what you want your computer name to be. Change your folder options Show hidden files in the Finder/File Explorer because Liferay contains hidden files that we need to edit. Mac Launch the Terminal. Enter the command below. defaults write com.apple.Finder AppleShowAllFiles TRUE Relaunch the Finder to make the changes take effect. killall Finder Windows Click the Start Menu and search for Folder Explorer Options. Click on the View tab . Under the Advanced settings: section, make sure Show hidden files, folders and drives is selected. Make sure Hide extensions for known file types is unchecked. Set ANT_OPTS environment variable ANT_OPTS is an environment variable that provides a list of arguments that you want to pass to the Java Virtual Machine that will run Ant. Mac Create a .bash_profile if one does not already exist. Enter the contents below into the .bash_profile. export ANT_OPTS=\"-Xms2048m -Xmx4096m\" Relaunch the Terminal. Windows Right click on My Computer and choose Properties. Click on the Advanced system settings link. Click on the Environment Variables... button. Click on New... under the User variables section. We will be setting the ANT_OPTS environment variable. Fill out the field values with Variable name: being ANT_OPTS and Variable value: being the -Xms2048m -Xmx4096m. Click OK to save this environment variable. Setup Apache Ant Ant does almost everything for you; it uses scripts to automate tasks and compile Liferay. You should have already downloaded the Apache Ant in the previous step. This will help you install and set it up. Windows Unzip the downloaded file from the previous step into your C:\\ drive. Go to your Ant directory in the File Explorer and copy the path from the address bar. Right click on My Computer and choose Properties. Click on the Advanced system settings link. Click on the Environment Variables... button. Click on New... under the System variables section. We will be setting the ANT_HOME environment variable. Fill out the field values with Variable name: being ANT_HOME and Variable value: being the Apache Ant path you coped in step 2. Click OK to save this environment variable. Verify that the ANT_HOME variable is correct. 10. In the Environment Variables window, go to the System variables section and look for a variable called PATH and click Edit.... This variable should already exist and have values in it. 12. Do not delete this variable. At the beginning of this variable, enter the code below. We are adding our ANT_HOME variable to the PATH variable. %ANT_HOME%\\bin; 13. Open a new Command Prompt. 14. Enter the command below in the Command Prompt to make sure Ant is installed correctly. A message Buildfile: build.xml does not exist! Build failed. ant Setup Java JDK Liferay is written in Java, so you will need Java on your machine in order to have it run. You should have already downloaded the Java JDK in the previous step. This will help you install and set it up. Mac Double-click the downloaded installer from the previous step. (The installer should be in .dmg format). Follow the prompts to install the Java JDK. To check if Java is installed, launch the Terminal. Enter the command below in the Terminal to make sure Java is installed correctly. A message regarding your Java version should be displayed. Make sure your version displayed matches the Java JDK version you downloaded. java -version Windows Double-click the downloaded installer from the previous step. Follow the prompts to install the Java JDK. Go to your Java JDK directory in the File Explorer and copy the path from the address bar. Right click on My Computer and choose Properties. Click on the Advanced system settings link. Click on the Environment Variables... button. Click on New... under the System variables section. We will be setting the JAVA_HOME environment variable. Fill out the field values with Variable name: being JAVA_HOME and Variable value: being the Java JDK path you coped in step 3. Click OK to save this environment variable. 10. Verify that the JAVA_HOME variable is correct. 11. In the Environment Variables window, go to the System variables section and look for a variable called PATH and click Edit.... This variable should already exist and have values in it. 12. Do not delete this variable. At the beginning of this variable, enter the code below. We are adding our JAVA_HOME variable to the PATH variable. %JAVA_HOME%\\bin; 13. Open a new Command Prompt. 14. Enter the command below in the Command Prompt to make sure Java is installed correctly. A message regarding your Java version should be displayed. Make sure your version displayed matches the Java JDK version you downloaded. java -version 15. Enter the command below in the Command Prompt to check if your PATH variable is set correctly. It should list the directory of your JAVA JDK. path ","srcFilePath":"src/pages/tutorials/machine/step-two.md","id":"step-two","location":"/tutorials/machine/step-two.html","url":"/tutorials/machine/step-two.html"}},"childIds":["step-one","step-two","step-three","step-four","step-five","step-six","step-seven","step-eight","step-nine","step-ten","step-eleven"]}},"childIds":["machine"]},"updates":{"title":"Updates","description":"Check out what's new","updates":[{"version":"1.0.0","major":true,"features":[{"icon":"info","title":"Initial changes","description":"Initial port of documentation from Social Office."}]},{"version":"1.0.1","major":false,"features":[{"icon":"info","title":"Fix typo","description":"Update typo in file name."}]},{"version":"1.0.2","major":false,"features":[{"icon":"info","title":"Fix typo","description":"Update typo in instructions."}]},{"version":"1.0.3","major":false,"features":[{"icon":"info","title":"Update JDK link","description":"Changed the recommended version of JDK from 9 to 8."}]}],"weight":4,"content":" ","srcFilePath":"src/pages/updates/index.soy","id":"updates","location":"/updates/","url":"/updates/"}},"childIds":["guide","tutorials","updates"]}}